`	`When a user enters an URL in the browser, how does the browser fetch the desired result?

1. Browser checks cache for DNS entry to find the corresponding IP address of website.
   It looks for following cache. If not found in one, then continues checking to the next until found.
   1. Browser Cache
   1. Operating Systems Cache
   1. Router Cache
   1. ISP Cache
1. If not found in cache, ISP’s (Internet Service Provider) DNS server initiates a DNS query to find IP address of server that hosts the domain name.
   The requests are sent using small data packets that contain information content of request and IP address it is destined for.
1. Browser initiates a TCP (Transfer Control Protocol) connection with the server using synchronize (SYN) and acknowledge (ACK) messages.
1. Browser sends an HTTP request to the web server. GET or POST request.
1. Server on the host computer handles that request and sends back a response. It assembles a response in some format like JSON, XML and HTML.
1. Server sends out an HTTP response along with the status of response.
1. Browser displays HTML content
1. Finally, Done.

**Browser’s Main Functionality**

The main function of a browser is to present the web resource you choose, by requesting it from the server and displaying it in the browser window. The resource is usually an HTML document, but may also be a PDF, image, or some other type of content. The location of the resource is specified by the user using a URI (Uniform Resource Identifier).

The way the browser interprets and displays HTML files is specified in the HTML and CSS specifications. These specifications are maintained by the W3C (World Wide Web Consortium) organization, which is the standards organization for the web. For years browsers conformed to only a part of the specifications and developed their own extensions. That caused serious compatibility issues for web authors. Today most of the browsers conform to the specifications.

Browser user interfaces have a lot in common with each other. Among the common user interface elements are:

1. Address bar for inserting a URI
1. Back and forward buttons
1. Bookmarking options
1. Refresh and stop buttons for refreshing or stopping the loading of current documents
1. Home button that takes you to your home page

**The browser's high-level structure**

The browser's main components are:

1. **The user interface**: this includes the address bar, back/forward button, bookmarking menu, etc. Every part of the browser display except the window where you see the requested page.
1. **The Browser Engine**: The browser engine works as a bridge between the User interface and the rendering engine. According to the inputs from various user interfaces, it queries and manipulates the rendering engine.
1. **The rendering engine**: responsible for displaying requested content. For example, if the requested content is HTML, the rendering engine parses HTML and CSS, and displays the parsed content on the screen.
1. **Networking**: for network calls such as HTTP requests, using different implementations for different platform behind a platform-independent interface.
1. **UI backend**: used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform specific. Underneath it uses operating system user interface methods.
1. **JavaScript Interpreter:** It is the component of the browser which interprets and executes the JavaScript code embedded in a website. The interpreted results are sent to the rendering engine for display. If the script is external, then first the resource is fetched from the network. Parser keeps on hold until the script is executed
1. **Data storage**. This is a persistence layer. The browser may need to save all sorts of data locally, such as cookies. Browsers also support storage mechanisms such as localStorage, IndexedDB, WebSQL and FileSystem.




**Browser Components**

Data Persistence

User Interface

Browser Engine

Rendering Engine

![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.001.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.002.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.003.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.004.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.005.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.006.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.007.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.005.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.008.png)

UI Backend

Networking

JavaScript Interpreter

![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.009.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.010.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.011.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.012.png)


















**Rendering Engine Basic Flow**

Painting the render tree

Layout the render tree

Render Tree Construction

Parsing HTML to construct DOM tree

![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.013.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.014.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.015.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.016.png)

![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.017.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.018.png)![](Aspose.Words.2626ebcc-4e8b-4e18-a55b-606452a2f19b.019.png)



